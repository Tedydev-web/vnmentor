@model vnmentor.Models.ResetPasswordViewModel
@using vnmentor.Resources

@{
    ViewBag.Title = Resource.ResetPassword;
}

@using (Html.BeginForm("ResetPassword", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post,null, new { @class = "form-horizontal", role = "form" }))
{
	@Html.HiddenFor(m=>m.Code)
	@Html.AntiForgeryToken();
}

@await Html.PartialAsync("~/Views/Shared/_Notification.cshtml")
<style>
</style>
<div class="my-5"></div>
<div class="position-relative-w-100">
    <div id="carouselExampleAutoplaying" class="carousel slide w-100 h-100 carousel-slide-w-100-h-100" data-bs-ride="carousel">
      <div class="carousel-inner">
        <div class="carousel-item active">
          <img src="https://res.cloudinary.com/dfzhyunci/image/upload/EduVision/Slide/Slider_01.png" class="d-fluid w-100 h-10 d-fluid-w-100-h-10" alt="Slide 1">
        </div>
        <div class="carousel-item">
          <img src="https://res.cloudinary.com/dfzhyunci/image/upload/EduVision/Slide/Slider_02.png" class="d-fluid w-100 h-10 d-fluid-w-100-h-10" alt="Slide 2">
        </div>
        <div class="carousel-item">
          <img src="https://res.cloudinary.com/dfzhyunci/image/upload/EduVision/Slide/Slider_03.png" class="d-fluid w-100 h-10 d-fluid-w-100-h-10" alt="Slide 3">
        </div>
      </div>
      <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
    </div>
</div>
<section class="py-10 px-3 px-sm-5 py-10-px-3-px-sm-5" style="width: 60vw;">
 <div class="container" id="form">
        <div class="wrapper">
                  <div class="row justify-content-start align-items-start gx-0 gx-sm-5">
                      <div class="col-lg-6 pt-5 pt-lg-0 order-1 order-lg-0">
                <iframe src="https://lottie.host/embed/95312b75-9aff-4c75-a3c4-8b094d1a6e14/0kWrRns6QS.json" style="width: 100%; height: 600px;"></iframe>
            </div>
            <div class="col-lg-6 order-0 order-lg-1" style="border: solid #CDA666; border-radius: 30px; padding: 30px; background-color: #E6DACC;">
                <h1 class="fw600 pb-2 title-lg"><span class="color-primarycolor">@Resource.Reset</span> @Resource.YourPassword</h1>
                <div class="pb-3">@Resource.Pleasefillinthefollowing</div>
                @Html.ValidationSummary("", new { @class = "invalid-message" })
                @using (Html.BeginForm("ResetPassword", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post,null, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.HiddenFor(m=>m.Code)
                    @Html.AntiForgeryToken();
                    <div class="mb-3 text-break">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "form-label required fw600" })
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "invalid-message" })
                        </div>
                    </div>
                    <div class="mb-3 text-break">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "form-label required fw600" })
                            <i class="fa-solid fa-circle-info text-info" data-bs-toggle="tooltip" data-bs-placement="right"
                               title="@Resource.PasswordRequirementText"></i>
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "invalid-message" })
                        </div>
                    </div>
                    <div class="mb-3 text-break">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "form-label required fw600", @for = "ConfirmPassword" })
                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @type = "password", @id = "ConfirmPassword" } })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "invalid-message" })
                        </div>
                    </div>
                    <button type="submit" class="btn form-btn btn-primary hover-boxshadow hover-moveup">@Resource.Submit</button>
                }
            </div>
        </div>
    </div>
 </div>
</section>
<div id="loadingOverlay" class="loading-overlay">
    <iframe id="loadingIframe" class="loading-iframe" src="https://lottie.host/embed/79bf2fbc-16f4-430e-a8a5-13a2d5548532/hmtaR2UvyY.json" style="width: 100%; height: 500px;"></iframe>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Lấy ra form và iframe overlay
            const form = document.querySelector('form');
            const loadingOverlay = document.getElementById('loadingOverlay');
            let iframeLoaded = false; // Biến để theo dõi trạng thái của iframe

            // Bắt sự kiện khi iframe load xong
            document.getElementById('loadingIframe').onload = function() {
                // Cập nhật trạng thái khi iframe load xong
                iframeLoaded = true;
            };

            // Hàm để chuyển trang sau khi delay
            function goToNextPage() {
                // Khóa mọi hành động của người dùng và ngăn chặn cuộn trang
                document.body.style.pointerEvents = 'none';
                document.body.style.overflow = 'hidden';
                setTimeout(function() {
                    form.submit(); // Thực hiện submit form sau 5 giây
                }, 500);
            }

            // Bắt sự kiện khi form submit
            form.addEventListener('submit', function(event) {
                // Ngăn chặn hành động mặc định của form
                event.preventDefault();

                // Hiển thị iframe overlay
                loadingOverlay.style.display = 'block';

                // Nếu iframe đã hoàn tất, thì chuyển trang
                if (iframeLoaded) {
                    goToNextPage();
                } else {
                    // Nếu chưa hoàn tất, thì đợi đến khi hoàn tất và chuyển trang sau đó
                    document.getElementById('loadingIframe').onload = function() {
                        goToNextPage();
                    };
                }
            });
        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
